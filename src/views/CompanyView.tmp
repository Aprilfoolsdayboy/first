<template>
    <div>
        <h1>기획사 정보</h1>
    </div>
    <div class="company_list_area">
        <table>
            <thead>
                <tr>
                    <th>번호</th>
                    <th>기획사 명</th>
                    <th><button @click="addCompany()">기획사 추가</button></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="item in list" :key="item.pubSeq">
                    <td>{{ item.pubSeq }}</td>
                    <td>
                        <button class="company_name" @click="companyDetail(item.pubSeq)">{{ item.pubName }}</button>
                    </td>
                    <td>
                        <button @click="deleteCompany(item.pubSeq)">삭제</button>
                    </td>
                </tr>
            </tbody>
        </table>
        <div class="search_area">
            <input type="text" v-model="keyword">
            <button @click="search()">검색</button>
        </div>
        <div class="pager_area">
            <button class="pager" v-for="p in totalPage" :key="p" @click="pagerClick(p-1)">{{ p }}</button>
        </div>
        <CompanyPopup :mode="popupMode" :company="selected" v-if="popup" @closePopup="closePopup()"/>
    </div>
</template>
<script>
    import CompanyPopup from "@/components/CompanyPopup.vue";
    export default {
        name: "CompanyView",
        components:{CompanyPopup},
        data() {
            return {
                list:null,
                currentPage:0,
                totalPage:0,
                keyword:null,
                popup:false,
                popupMode:"add",
                selected:null,
            }
        },
        created() {
            this.loadCompanyList();
        },
        methods: {
            loadCompanyList() {
            this.$http.get("/api/company/list",
            {
                params:{
                    page:this.currentPage,
                    keyword:this.keyword
                }
            })
            .then((r) => {
                this.list = r.data.list;
                this.currentPage = r.data.currentPage;
                this.totalPage = r.data.totalPage;
            })
            },
            deleteCompany(seq) {
                if(!confirm("삭제하시겠습니까?\n삭제된 데이터는 되돌릴 수 없습니다.")) return;
                this.$http.delete("/api/company/delete?company_no="+seq)
                .then((r)=> {
                alert(r.data.message);
                location.reload();
                })
            },
            companyDetail(seq) {
                this.popup = true;
                // list에 있는 요소들을 순차적으로 조회하면서, pubSeq값이 파라미터의 seq값과 일치하는 것만
                // 걸러 낸 새로운 리스트를 만들어서 selected에 저장한다.
                this.selected = this.list.filter((company) => company.pubSeq == seq)[0];
                // this.no = seq;
                this.popupMode = "update";
                console.log(this.list)
                console.log(this.selected, seq)
            },
            pagerClick(page) {
                this.currentPage = page;
            },
            search() {
                this.currentPage = 0;
                this.loadCompanyList();
            },
            addCompany() {
                this.popup = true;
                this.popupMode = "add";
            },
            closePopup() {
                this.popup = false;
                this.selected = null;
            }
        }
    }
</script>
<style>
</style>